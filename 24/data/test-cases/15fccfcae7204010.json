{"uid":"15fccfcae7204010","name":"test_tc_001_04_06_verify_in_day_list_days_of_the_week","fullName":"tests.test_main_page_ow6.TestMainPage#test_tc_001_04_06_verify_in_day_list_days_of_the_week","historyId":"f26cf6cf0693d771e799b3854022c70c","time":{"start":1687309554001,"stop":1687309554014,"duration":13},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_main_page_ow6.TestMainPage object at 0x7f1a320dbd90>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d82844a963129ff8491557487cf5a1d6\")>\nopen_and_load_main_page = None\n\n    def test_tc_001_04_06_verify_in_day_list_days_of_the_week(self, driver, open_and_load_main_page):\n        page = MainPage(driver)\n>       page.verify_in_day_list_days_of_the_week()\n\ntests/test_main_page_ow6.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.main_page.MainPage object at 0x7f1a30da1bd0>\n\n    def verify_in_day_list_days_of_the_week(self):\n        days_by_page = []\n        days = self.driver.find_elements(*self.locators.DAYS_IN_8_DAY_FORECAST)\n        for day in days:\n            days_by_page.append(day.text[:3])\n        number_day = datetime.now().weekday()\n        days_by_computer = WEEKDAYS[number_day:] + WEEKDAYS[:number_day] + WEEKDAYS[(number_day):(number_day + 1):]\n>       assert days_by_page == days_by_computer\nE       AssertionError\n\npages/main_page.py:482: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1687309545758,"stop":1687309546567,"duration":809},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"open_and_load_main_page","time":{"start":1687309546567,"stop":1687309554000,"duration":7433},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"wait","time":{"start":1687309546567,"stop":1687309546567,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_main_page_ow6.TestMainPage object at 0x7f1a320dbd90>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d82844a963129ff8491557487cf5a1d6\")>\nopen_and_load_main_page = None\n\n    def test_tc_001_04_06_verify_in_day_list_days_of_the_week(self, driver, open_and_load_main_page):\n        page = MainPage(driver)\n>       page.verify_in_day_list_days_of_the_week()\n\ntests/test_main_page_ow6.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.main_page.MainPage object at 0x7f1a30da1bd0>\n\n    def verify_in_day_list_days_of_the_week(self):\n        days_by_page = []\n        days = self.driver.find_elements(*self.locators.DAYS_IN_8_DAY_FORECAST)\n        for day in days:\n            days_by_page.append(day.text[:3])\n        number_day = datetime.now().weekday()\n        days_by_computer = WEEKDAYS[number_day:] + WEEKDAYS[:number_day] + WEEKDAYS[(number_day):(number_day + 1):]\n>       assert days_by_page == days_by_computer\nE       AssertionError\n\npages/main_page.py:482: AssertionError","steps":[],"attachments":[{"uid":"8a74ead51858a9ba","name":"Screenshot","source":"8a74ead51858a9ba.png","type":"image/png","size":408756},{"uid":"f8864b91ffb808e2","name":"HTML source","source":"f8864b91ffb808e2.html","type":"text/html","size":178805},{"uid":"ae087582676ff54d","name":"stdout","source":"ae087582676ff54d.txt","type":"text/plain","size":35}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"wait::0","time":{"start":1687309554418,"stop":1687309554418,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"driver::0","time":{"start":1687309554419,"stop":1687309554480,"duration":61},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_main_page_ow6"},{"name":"subSuite","value":"TestMainPage"},{"name":"host","value":"fv-az360-66"},{"name":"thread","value":"2427-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_main_page_ow6"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":11},"items":[{"uid":"43a60619c3de1be1","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/23//#testresult/43a60619c3de1be1","status":"passed","time":{"start":1687222942466,"stop":1687222942558,"duration":92}},{"uid":"cc0b91b688df8e06","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/22//#testresult/cc0b91b688df8e06","status":"passed","time":{"start":1687136673243,"stop":1687136673339,"duration":96}},{"uid":"8837a4f974bc3d48","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/21//#testresult/8837a4f974bc3d48","status":"passed","time":{"start":1687050667661,"stop":1687050667787,"duration":126}},{"uid":"6bcae2ea7fa4e6a0","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/20//#testresult/6bcae2ea7fa4e6a0","status":"passed","time":{"start":1686963634521,"stop":1686963634615,"duration":94}},{"uid":"db2e3fab7ea18b5e","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/19//#testresult/db2e3fab7ea18b5e","status":"passed","time":{"start":1686877469566,"stop":1686877469666,"duration":100}},{"uid":"24e45cc4e069716a","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/18//#testresult/24e45cc4e069716a","status":"passed","time":{"start":1686790962345,"stop":1686790962449,"duration":104}},{"uid":"e23d7d63b2dc2260","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/17//#testresult/e23d7d63b2dc2260","status":"passed","time":{"start":1686704619758,"stop":1686704619855,"duration":97}},{"uid":"f91dc5f1b860e529","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/14//#testresult/f91dc5f1b860e529","status":"passed","time":{"start":1686445773480,"stop":1686445773584,"duration":104}},{"uid":"897f0611ff81bd68","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/13//#testresult/897f0611ff81bd68","status":"passed","time":{"start":1686358817774,"stop":1686358817876,"duration":102}},{"uid":"38b8b010628ec51a","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/12//#testresult/38b8b010628ec51a","status":"passed","time":{"start":1686272798211,"stop":1686272798340,"duration":129}}]},"tags":[]},"source":"15fccfcae7204010.json","parameterValues":[]}