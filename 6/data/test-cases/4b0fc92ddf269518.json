{"uid":"4b0fc92ddf269518","name":"test_TC_001_09_05_switched_on_Celsius","fullName":"tests.test_pandoras_box.tests.test_widgets_constructor_page#test_TC_001_09_05_switched_on_Celsius","historyId":"9bbcc9fc093c5fa9beac482c96b56b8d","time":{"start":1685255995485,"stop":1685256000734,"duration":5249},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: headless chrome=113.0.5672.63)\nStacktrace:\n#0 0x55876e570133 <unknown>\n#1 0x55876e2a4966 <unknown>\n#2 0x55876e2a9126 <unknown>\n#3 0x55876e2ab070 <unknown>\n#4 0x55876e319e02 <unknown>\n#5 0x55876e300bd2 <unknown>\n#6 0x55876e3191c7 <unknown>\n#7 0x55876e3009a3 <unknown>\n#8 0x55876e2d546a <unknown>\n#9 0x55876e2d655e <unknown>\n#10 0x55876e52fcae <unknown>\n#11 0x55876e5338fe <unknown>\n#12 0x55876e53cf20 <unknown>\n#13 0x55876e534923 <unknown>\n#14 0x55876e507c0e <unknown>\n#15 0x55876e557b08 <unknown>\n#16 0x55876e557c97 <unknown>\n#17 0x55876e568113 <unknown>\n#18 0x7f1ebbb9bb43 <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4e88c38a0fa72b0689118aad0afd8209\")>\n\n    def test_TC_001_09_05_switched_on_Celsius(driver):\n        page = WidgetsConstructor(driver, link=WidgetsConstructor.widget_constructor_URL)\n        page.open_page()\n>       page.check_switched_temperature_units('celsius')\n\ntests/test_pandoras_box/tests/test_widgets_constructor_page.py:5: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_pandoras_box/pages/widgets_constructor_page.py:29: in check_switched_temperature_units\n    self.element_is_visible(widget_locator)\npages/base_page.py:65: in element_is_visible\n    self.go_to_element(self.element_is_present(locator))\npages/base_page.py:122: in go_to_element\n    self.driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:500: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0bdafa8520>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#16 0x55876e557c97 \\\\u003Cunknown>\\\\n#17 0x55876e568113 \\\\u003Cunknown>\\\\n#18 0x7f1ebbb9bb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: headless chrome=113.0.5672.63)\nE       Stacktrace:\nE       #0 0x55876e570133 <unknown>\nE       #1 0x55876e2a4966 <unknown>\nE       #2 0x55876e2a9126 <unknown>\nE       #3 0x55876e2ab070 <unknown>\nE       #4 0x55876e319e02 <unknown>\nE       #5 0x55876e300bd2 <unknown>\nE       #6 0x55876e3191c7 <unknown>\nE       #7 0x55876e3009a3 <unknown>\nE       #8 0x55876e2d546a <unknown>\nE       #9 0x55876e2d655e <unknown>\nE       #10 0x55876e52fcae <unknown>\nE       #11 0x55876e5338fe <unknown>\nE       #12 0x55876e53cf20 <unknown>\nE       #13 0x55876e534923 <unknown>\nE       #14 0x55876e507c0e <unknown>\nE       #15 0x55876e557b08 <unknown>\nE       #16 0x55876e557c97 <unknown>\nE       #17 0x55876e568113 <unknown>\nE       #18 0x7f1ebbb9bb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1685255994701,"stop":1685255995484,"duration":783},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: headless chrome=113.0.5672.63)\nStacktrace:\n#0 0x55876e570133 <unknown>\n#1 0x55876e2a4966 <unknown>\n#2 0x55876e2a9126 <unknown>\n#3 0x55876e2ab070 <unknown>\n#4 0x55876e319e02 <unknown>\n#5 0x55876e300bd2 <unknown>\n#6 0x55876e3191c7 <unknown>\n#7 0x55876e3009a3 <unknown>\n#8 0x55876e2d546a <unknown>\n#9 0x55876e2d655e <unknown>\n#10 0x55876e52fcae <unknown>\n#11 0x55876e5338fe <unknown>\n#12 0x55876e53cf20 <unknown>\n#13 0x55876e534923 <unknown>\n#14 0x55876e507c0e <unknown>\n#15 0x55876e557b08 <unknown>\n#16 0x55876e557c97 <unknown>\n#17 0x55876e568113 <unknown>\n#18 0x7f1ebbb9bb43 <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4e88c38a0fa72b0689118aad0afd8209\")>\n\n    def test_TC_001_09_05_switched_on_Celsius(driver):\n        page = WidgetsConstructor(driver, link=WidgetsConstructor.widget_constructor_URL)\n        page.open_page()\n>       page.check_switched_temperature_units('celsius')\n\ntests/test_pandoras_box/tests/test_widgets_constructor_page.py:5: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_pandoras_box/pages/widgets_constructor_page.py:29: in check_switched_temperature_units\n    self.element_is_visible(widget_locator)\npages/base_page.py:65: in element_is_visible\n    self.go_to_element(self.element_is_present(locator))\npages/base_page.py:122: in go_to_element\n    self.driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:500: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0bdafa8520>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#16 0x55876e557c97 \\\\u003Cunknown>\\\\n#17 0x55876e568113 \\\\u003Cunknown>\\\\n#18 0x7f1ebbb9bb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: headless chrome=113.0.5672.63)\nE       Stacktrace:\nE       #0 0x55876e570133 <unknown>\nE       #1 0x55876e2a4966 <unknown>\nE       #2 0x55876e2a9126 <unknown>\nE       #3 0x55876e2ab070 <unknown>\nE       #4 0x55876e319e02 <unknown>\nE       #5 0x55876e300bd2 <unknown>\nE       #6 0x55876e3191c7 <unknown>\nE       #7 0x55876e3009a3 <unknown>\nE       #8 0x55876e2d546a <unknown>\nE       #9 0x55876e2d655e <unknown>\nE       #10 0x55876e52fcae <unknown>\nE       #11 0x55876e5338fe <unknown>\nE       #12 0x55876e53cf20 <unknown>\nE       #13 0x55876e534923 <unknown>\nE       #14 0x55876e507c0e <unknown>\nE       #15 0x55876e557b08 <unknown>\nE       #16 0x55876e557c97 <unknown>\nE       #17 0x55876e568113 <unknown>\nE       #18 0x7f1ebbb9bb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: StaleElementReferenceException","steps":[],"attachments":[{"uid":"6b2dfca5179d41d9","name":"Screenshot","source":"6b2dfca5179d41d9.png","type":"image/png","size":150155},{"uid":"45f765eacec10602","name":"HTML source","source":"45f765eacec10602.html","type":"text/html","size":75377},{"uid":"d8478a6ec266c569","name":"stdout","source":"d8478a6ec266c569.txt","type":"text/plain","size":35}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1685256000911,"stop":1685256000973,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests.test_pandoras_box.tests"},{"name":"suite","value":"test_widgets_constructor_page"},{"name":"host","value":"fv-az842-109"},{"name":"thread","value":"2316-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_pandoras_box.tests.test_widgets_constructor_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":2,"unknown":0,"total":6},"items":[{"uid":"5648da2906273c8d","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/5//#testresult/5648da2906273c8d","status":"passed","time":{"start":1685251932558,"stop":1685251936403,"duration":3845}},{"uid":"773e4b173dbf7694","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/4//#testresult/773e4b173dbf7694","status":"passed","time":{"start":1685248518866,"stop":1685248523213,"duration":4347}},{"uid":"b848a9e6c66647b8","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/3//#testresult/b848a9e6c66647b8","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55ec1ad51133 <unknown>\n#1 0x55ec1aa85966 <unknown>\n#2 0x55ec1aac20dc <unknown>\n#3 0x55ec1aac2211 <unknown>\n#4 0x55ec1aafc6c4 <unknown>\n#5 0x55ec1aae1bfd <unknown>\n#6 0x55ec1aafa1c7 <unknown>\n#7 0x55ec1aae19a3 <unknown>\n#8 0x55ec1aab646a <unknown>\n#9 0x55ec1aab755e <unknown>\n#10 0x55ec1ad10cae <unknown>\n#11 0x55ec1ad148fe <unknown>\n#12 0x55ec1ad1df20 <unknown>\n#13 0x55ec1ad15923 <unknown>\n#14 0x55ec1ace8c0e <unknown>\n#15 0x55ec1ad38b08 <unknown>\n#16 0x55ec1ad38c97 <unknown>\n#17 0x55ec1ad49113 <unknown>\n#18 0x7f1715e8eb43 <unknown>","time":{"start":1685245702323,"stop":1685245787141,"duration":84818}},{"uid":"a20d2c82c2f0d3ef","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/2//#testresult/a20d2c82c2f0d3ef","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x563ea8d59133 <unknown>\n#1 0x563ea8a8d966 <unknown>\n#2 0x563ea8aca0dc <unknown>\n#3 0x563ea8aca211 <unknown>\n#4 0x563ea8b046c4 <unknown>\n#5 0x563ea8ae9bfd <unknown>\n#6 0x563ea8b021c7 <unknown>\n#7 0x563ea8ae99a3 <unknown>\n#8 0x563ea8abe46a <unknown>\n#9 0x563ea8abf55e <unknown>\n#10 0x563ea8d18cae <unknown>\n#11 0x563ea8d1c8fe <unknown>\n#12 0x563ea8d25f20 <unknown>\n#13 0x563ea8d1d923 <unknown>\n#14 0x563ea8cf0c0e <unknown>\n#15 0x563ea8d40b08 <unknown>\n#16 0x563ea8d40c97 <unknown>\n#17 0x563ea8d51113 <unknown>\n#18 0x7ff25d292b43 <unknown>","time":{"start":1685243243243,"stop":1685243312255,"duration":69012}},{"uid":"84000678fb5c2ea2","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/1//#testresult/84000678fb5c2ea2","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55cf47f6f133 <unknown>\n#1 0x55cf47ca3966 <unknown>\n#2 0x55cf47ce00dc <unknown>\n#3 0x55cf47ce0211 <unknown>\n#4 0x55cf47d1a6c4 <unknown>\n#5 0x55cf47cffbfd <unknown>\n#6 0x55cf47d181c7 <unknown>\n#7 0x55cf47cff9a3 <unknown>\n#8 0x55cf47cd446a <unknown>\n#9 0x55cf47cd555e <unknown>\n#10 0x55cf47f2ecae <unknown>\n#11 0x55cf47f328fe <unknown>\n#12 0x55cf47f3bf20 <unknown>\n#13 0x55cf47f33923 <unknown>\n#14 0x55cf47f06c0e <unknown>\n#15 0x55cf47f56b08 <unknown>\n#16 0x55cf47f56c97 <unknown>\n#17 0x55cf47f67113 <unknown>\n#18 0x7fecdc612b43 <unknown>","time":{"start":1685239884641,"stop":1685239953221,"duration":68580}}]},"tags":[]},"source":"4b0fc92ddf269518.json","parameterValues":[]}